// In scripts/ui/console.js

/**
 * Logs a structured message to the frontend console and prepares data for backend.
 * @param {object} options - The logging options.
 * @param {'error' | 'info' | 'warn'} [options.type='info'] - Type of the log.
 * @param {string} [options.ref='N/A'] - Reference section for the log.
 * @param {string} [options.message=''] - The log message.
 */
function logMsg({ type = 'info', ref = 'N/A', message = '' } = {}) {
    const consoleOutput = document.getElementById('console-output');

    if (!consoleOutput) {
        console.error("Console output element with ID 'console-output' not found.");
        return;
    }

    const validTypes = ['error', 'info', 'warn'];
    const logType = validTypes.includes(type.toLowerCase()) ? type.toLowerCase() : 'info';

    // 1. Create the main log entry container
    const logEntry = document.createElement('div');
    logEntry.className = 'console-log-entry';

    // 2. Create and append Icon
    const iconSpan = document.createElement('span');
    iconSpan.className = 'log-icon';
    const dotSpan = document.createElement('span');
    dotSpan.className = `log-dot log-dot-${logType}`;
    iconSpan.appendChild(dotSpan);
    logEntry.appendChild(iconSpan);

    // 3. Create and append Type
    const typeSpan = document.createElement('span');
    typeSpan.className = `log-type ${logType}`;
    typeSpan.textContent = logType.toUpperCase();
    logEntry.appendChild(typeSpan);

    // 4. Create and append Message
    const messageSpan = document.createElement('span');
    messageSpan.className = 'log-message';
    messageSpan.textContent = message;
    logEntry.appendChild(messageSpan);

    // 5. Create and append Ref
    const refSpan = document.createElement('span');
    refSpan.className = 'log-ref';
    refSpan.textContent = ref;
    logEntry.appendChild(refSpan);

    // 6. Create and append DateTime
    const now = new Date();
    const dateString = now.toLocaleDateString(undefined, { year: 'numeric', month: '2-digit', day: '2-digit' });
    const timeString = now.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    const dateTimeSpan = document.createElement('span');
    dateTimeSpan.className = 'log-datetime';
    dateTimeSpan.textContent = `${dateString} ${timeString}`;
    logEntry.appendChild(dateTimeSpan);

    // 7. Append the log entry to the console
    consoleOutput.appendChild(logEntry);

    // 8. Scroll to the bottom
    consoleOutput.scrollTop = consoleOutput.scrollHeight;

    // 9. Prepare data and send log to backend
    // This assumes window.currentStylingId is set when a brand styling is active.
    if (window.currentStylingId) {
        saveLogToDatabase({
            type: logType,
            ref: ref,
            message: message
            // Timestamp is generated by the backend
        }, window.currentStylingId);
    } else {
        console.warn('logMsg: window.currentStylingId is not set. Log not sent to backend.');
    }
}

async function saveLogToDatabase(logPayload, stylingId) {
    try {
        const response = await apiFetch(`<span class="math-inline">\{API\_BASE\_URL\}/brand\-stylings/</span>{stylingId}/logs/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(logPayload),
        });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ detail: `HTTP error ${response.status}` }));
            console.error('Failed to save log to database:', errorData.detail);
            // You could add a silent error indicator to the UI if critical
        }
        // const savedLog = await response.json(); // For debugging
        // console.log('Log persisted:', savedLog);
    } catch (error) {
        console.error('Error sending log to database:', error);
    }
}

// --- Example Usage (you can call this from other parts of your JS code) ---
// logMsg({ type: 'info', ref: 'UserAuth', message: 'User logged in successfully.' });
// logMsg({ type: 'warn', ref: 'FileUpload', message: 'Image size exceeds recommended limit.' });
// logMsg({ type: 'error', ref: 'API', message: 'Failed to fetch site data.' });
// logMsg({ message: 'A simple message without type or ref specified.'});